Interface IAppSetting: {
  token: string,
  port: string,
  testRepoUrls: Array<string>,
  requestLimit: { maxCount: number, minDelay: number },
  cmd: { concurrency: number, timeout: number, script: string },
  cache: { port: string, address: string },
  dbServer: { port: string, address: string, connection: string, username: string, password: string }
}


if (!process.env.GITHUB_API_KEY) throw "Required environment variable GITHUB_API_KEY is not set.";
if (!process.env.TEST_REPO_URLS) throw "Required environment variable TEST_REPO_URLS is not set.";
let TEST_REPO_URLS: Array<string> = [];

try {
  TEST_REPO_URLS = JSON.parse(process.env.TEST_REPO_URLS);
  if (!Array.isArray(TEST_REPO_URLS)) throw 'not array.';
  if (TEST_REPO_URLS.length < 1) throw 'array is empty.'
}
catch (ex) {
  throw 'Required environment variable TEST_REPO_URLS is invalid: ' + ex;
}

AppSetting.token = process.env.GITHUB_API_KEY;
AppSetting.testRepoUrls = TEST_REPO_URLS;
AppSetting.port =  process.env.PORT || 4430;
AppSetting.requestLimit.maxCount = process.env.MAX_REQUESTS || 10;
AppSetting.requestLimit.minDelay = process.env.MIN_REQUEST_DELAY || 43200000;
AppSetting.cmd.concurrency = process.env.WORKERS || 1;
AppSetting.cmd.timeout = process.env.CMD_TIMEOUT || 500000; // milliseconds
AppSetting.cmd.script = process.env.CMD_SCRIPT || "app.sh";
AppSetting.cache.port = process.env.REDIS_PORT || 6379;
AppSetting.cache.address = process.env.REDIS_ADDR || 'cache' || '127.0.0.1';  // 'cache' is set by docker-compose in /etc/host
AppSetting.dbServer.port = process.env.DB_PORT || 5984;
AppSetting.dbServer.address = process.env.DB_ADDR || 'db' || '127.0.0.1';  // 'db' is set by docker-compose in /etc/hosts
AppSetting.dbServer.connection = url.format({
  protocol: 'http',
  hostname: AppSetting.dbServer.address,
  port: AppSetting.dbServer.port
});
AppSetting.dbServer.username = process.env.DB_DATA_USERNAME || "app";
AppSetting.dbServer.password = process.env.DB_DATA_PASSWORD || "";
