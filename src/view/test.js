var report = {
   "reportTitle": "deliverable",
   "stats": {
       "suites": 38,
       "tests": 32,
       "passes": 2,
       "pending": 0,
       "failures": 30,
       "start": "2016-09-27T00:06:25.292Z",
       "end": "2016-09-27T00:06:29.065Z",
       "duration": 3773,
       "testsRegistered": 34,
       "passPercent": 5.9,
       "pendingPercent": 0,
       "other": 3,
       "hasOther": true,
       "skipped": 2,
       "hasSkipped": true,
       "passPercentClass": "danger",
       "pendingPercentClass": "danger"
   },
   "suites": {
       "title": "",
       "suites": [
           {
               "title": "Code Service",
               "suites": [
                   {
                       "title": "~Apollo~Inserting a courses dataset should return a 204 if the dataset was not present before.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Apollo~Inserting a courses dataset should return a 204 if the dataset was not present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 400 to equal 204",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "27706e3e-9a53-48ec-8ecf-19eb96568f3f",
                               "parentUUID": "b03b843f-2dfa-4747-b701-458178cc98e6",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "b03b843f-2dfa-4747-b701-458178cc98e6",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Apollo~Inserting a courses dataset should return a 204 if the dataset was not present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 400 to equal 204",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "27706e3e-9a53-48ec-8ecf-19eb96568f3f",
                               "parentUUID": "b03b843f-2dfa-4747-b701-458178cc98e6",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Astro~Inserting a courses dataset should return a 201 if the dataset was present before.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Astro~Inserting a courses dataset should return a 201 if the dataset was present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 400 to equal 201",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">201</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "90ed7752-48ed-4a38-acdc-be02ecc5e7e3",
                               "parentUUID": "4d7df598-4b9a-4a4e-a03f-07d0be980194",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "4d7df598-4b9a-4a4e-a03f-07d0be980194",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Astro~Inserting a courses dataset should return a 201 if the dataset was present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 400 to equal 201",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">201</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "90ed7752-48ed-4a38-acdc-be02ecc5e7e3",
                               "parentUUID": "4d7df598-4b9a-4a4e-a03f-07d0be980194",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Astroboy~Inserting a courses dataset should return a 400 if an error occurs.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Astroboy~Inserting a courses dataset should return a 400 if an error occurs. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 204 to equal 400",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "906ff0e6-e8a1-4b5a-915c-b032ab7597af",
                               "parentUUID": "9725c995-88e0-4ce1-91e5-204b0b431f70",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "9725c995-88e0-4ce1-91e5-204b0b431f70",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Astroboy~Inserting a courses dataset should return a 400 if an error occurs. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 204 to equal 400",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "906ff0e6-e8a1-4b5a-915c-b032ab7597af",
                               "parentUUID": "9725c995-88e0-4ce1-91e5-204b0b431f70",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Aurora~Sending a valid query should return a 200.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321//query ]",
                               "fullTitle": "Code Service ~Aurora~Sending a valid query should return a 200. \n\t[ POST http://localhost:4321//query ]",
                               "timedOut": false,
                               "duration": 0,
                               "pass": false,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "a8ceba52-bca3-42a7-bf7f-59c1a1fbef85",
                               "parentUUID": "c9ff441e-5376-4bc2-8f29-66bf90821463",
                               "skipped": true
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "c9ff441e-5376-4bc2-8f29-66bf90821463",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                       ],
                       "skipped": [
                           {
                               "title": "\n\t[ POST http://localhost:4321//query ]",
                               "fullTitle": "Code Service ~Aurora~Sending a valid query should return a 200. \n\t[ POST http://localhost:4321//query ]",
                               "timedOut": false,
                               "duration": 0,
                               "pass": false,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "a8ceba52-bca3-42a7-bf7f-59c1a1fbef85",
                               "parentUUID": "c9ff441e-5376-4bc2-8f29-66bf90821463",
                               "skipped": true
                           }
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 0,
                       "totalPending": 0,
                       "totalSkipped": 1,
                       "hasPasses": false,
                       "hasFailures": false,
                       "hasPending": false,
                       "hasSkipped": true,
                       "duration": 0
                   },
                   {
                       "title": "~Barcelona~Deleting an existing dataset should return a 204.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Barcelona~Deleting an existing dataset should return a 204. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "TypeError",
                                   "message": "Cannot read property 'statusCode' of undefined",
                                   "stack": "<span class=\"hljs-built_in\">TypeError</span>: Cannot read property <span class=\"hljs-string\">'statusCode'</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">undefined</span><br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">723</span>:<span class=\"hljs-number\">22</span>)<br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">645</span>:<span class=\"hljs-number\">8</span>)<br>    at performInspections (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">874</span>:<span class=\"hljs-number\">14</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">863</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.onRequestError (node_modules/request/request.js:<span class=\"hljs-number\">813</span>:<span class=\"hljs-number\">8</span>)<br>    at Socket.socketErrorListener (_http_client.js:<span class=\"hljs-number\">308</span>:<span class=\"hljs-number\">9</span>)<br>    at emitErrorNT (net.js:<span class=\"hljs-number\">1272</span>:<span class=\"hljs-number\">8</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "a083da7f-85ce-455d-bdcf-9fc2f9078b76",
                               "parentUUID": "62b986eb-efbe-4595-b273-5a8139710556",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "62b986eb-efbe-4595-b273-5a8139710556",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Barcelona~Deleting an existing dataset should return a 204. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "TypeError",
                                   "message": "Cannot read property 'statusCode' of undefined",
                                   "stack": "<span class=\"hljs-built_in\">TypeError</span>: Cannot read property <span class=\"hljs-string\">'statusCode'</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">undefined</span><br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">723</span>:<span class=\"hljs-number\">22</span>)<br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">645</span>:<span class=\"hljs-number\">8</span>)<br>    at performInspections (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">874</span>:<span class=\"hljs-number\">14</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">863</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.onRequestError (node_modules/request/request.js:<span class=\"hljs-number\">813</span>:<span class=\"hljs-number\">8</span>)<br>    at Socket.socketErrorListener (_http_client.js:<span class=\"hljs-number\">308</span>:<span class=\"hljs-number\">9</span>)<br>    at emitErrorNT (net.js:<span class=\"hljs-number\">1272</span>:<span class=\"hljs-number\">8</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "a083da7f-85ce-455d-bdcf-9fc2f9078b76",
                               "parentUUID": "62b986eb-efbe-4595-b273-5a8139710556",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Barney~Deleting a non-existing dataset should return a 404.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Barney~Deleting a non-existing dataset should return a 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 405 to equal 404",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">405</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "9504f4af-5e01-40f8-bd8d-fccf2ede6981",
                               "parentUUID": "d037631c-96f5-4448-83b0-4463c1812a6f",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "d037631c-96f5-4448-83b0-4463c1812a6f",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Code Service ~Barney~Deleting a non-existing dataset should return a 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 405 to equal 404",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">405</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "9504f4af-5e01-40f8-bd8d-fccf2ede6981",
                               "parentUUID": "d037631c-96f5-4448-83b0-4463c1812a6f",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Barracuda~Sending a valid query should return a 424 if the dataset is not present.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321//query ]",
                               "fullTitle": "Code Service ~Barracuda~Sending a valid query should return a 424 if the dataset is not present. \n\t[ POST http://localhost:4321//query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 200 to equal 424",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">200</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "97ea5d3d-cfe1-47e0-b2f4-86a5c7416616",
                               "parentUUID": "62415e83-eaa6-4c3a-a6d6-0940ab318b21",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "62415e83-eaa6-4c3a-a6d6-0940ab318b21",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321//query ]",
                               "fullTitle": "Code Service ~Barracuda~Sending a valid query should return a 424 if the dataset is not present. \n\t[ POST http://localhost:4321//query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 200 to equal 424",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">200</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "97ea5d3d-cfe1-47e0-b2f4-86a5c7416616",
                               "parentUUID": "62415e83-eaa6-4c3a-a6d6-0940ab318b21",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Batman~Sending a not valid query should return a 400 with an error message.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321//query ]",
                               "fullTitle": "Code Service ~Batman~Sending a not valid query should return a 400 with an error message. \n\t[ POST http://localhost:4321//query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "e240e53e-11d0-471f-bf98-a953f183f379",
                               "parentUUID": "d824412b-b48d-44cb-916b-7b19b3980eb6",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerCodeSpec.js",
                       "uuid": "d824412b-b48d-44cb-916b-7b19b3980eb6",
                       "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321//query ]",
                               "fullTitle": "Code Service ~Batman~Sending a not valid query should return a 400 with an error message. \n\t[ POST http://localhost:4321//query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "e240e53e-11d0-471f-bf98-a953f183f379",
                               "parentUUID": "d824412b-b48d-44cb-916b-7b19b3980eb6",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   }
               ],
               "tests": [
               ],
               "pending": [
               ],
               "root": false,
               "_timeout": 30000,
               "file": "/test/ServerCodeSpec.js",
               "uuid": "59f50eeb-1d19-46fc-a65c-62c92310bb8f",
               "fullFile": "/project/deliverable/test/ServerCodeSpec.js",
               "passes": [
               ],
               "failures": [
               ],
               "skipped": [
               ],
               "hasTests": false,
               "hasSuites": true,
               "totalTests": 0,
               "totalPasses": 0,
               "totalFailures": 0,
               "totalPending": 0,
               "totalSkipped": 0,
               "hasPasses": false,
               "hasFailures": false,
               "hasPending": false,
               "hasSkipped": false,
               "duration": 0
           },
           {
               "title": "Public Query Service",
               "suites": [
                   {
                       "title": "~Colusa~Should be able to find sections with an average > 90.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Colusa~Should be able to find sections with an average > 90. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "878277fb-916a-432a-a69b-af2eb51d82cc",
                               "parentUUID": "31136a81-5df2-45f4-ac5a-cd7d57245bfe",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "31136a81-5df2-45f4-ac5a-cd7d57245bfe",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Colusa~Should be able to find sections with an average > 90. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "878277fb-916a-432a-a69b-af2eb51d82cc",
                               "parentUUID": "31136a81-5df2-45f4-ac5a-cd7d57245bfe",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cromulent~Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Cromulent~Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "221a5c78-fc53-4151-a433-3d58749a6dd3",
                               "parentUUID": "5a699b0b-2aa7-483d-a58c-3284fda05db0",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "5a699b0b-2aa7-483d-a58c-3284fda05db0",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Cromulent~Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "221a5c78-fc53-4151-a433-3d58749a6dd3",
                               "parentUUID": "5a699b0b-2aa7-483d-a58c-3284fda05db0",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Crusader~Should be able to find sections of CPSC 310",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Crusader~Should be able to find sections of CPSC 310 \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "64163169-0241-4244-a730-6def0715326d",
                               "parentUUID": "a466462b-42e4-4ba3-8fcc-4e9a97223e25",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "a466462b-42e4-4ba3-8fcc-4e9a97223e25",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Crusader~Should be able to find sections of CPSC 310 \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "64163169-0241-4244-a730-6def0715326d",
                               "parentUUID": "a466462b-42e4-4ba3-8fcc-4e9a97223e25",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cyclone~Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Cyclone~Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "8667e831-e9db-4134-838f-407d309711a3",
                               "parentUUID": "bdab677d-3c9f-493a-a1f3-1c25d69e23bf",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "bdab677d-3c9f-493a-a1f3-1c25d69e23bf",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Cyclone~Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "8667e831-e9db-4134-838f-407d309711a3",
                               "parentUUID": "bdab677d-3c9f-493a-a1f3-1c25d69e23bf",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Darwin~Should not be able to submit an empty query",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Darwin~Should not be able to submit an empty query \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 5,
                               "state": "passed",
                               "speed": "fast",
                               "pass": true,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "eb0f4f0f-598f-485c-aac5-ce3978a76c96",
                               "parentUUID": "559c80e5-f860-49c0-9d5c-0d15f977d4e8",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "559c80e5-f860-49c0-9d5c-0d15f977d4e8",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Public Query Service ~Darwin~Should not be able to submit an empty query \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 5,
                               "state": "passed",
                               "speed": "fast",
                               "pass": true,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "eb0f4f0f-598f-485c-aac5-ce3978a76c96",
                               "parentUUID": "559c80e5-f860-49c0-9d5c-0d15f977d4e8",
                               "skipped": false
                           }
                       ],
                       "failures": [
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 1,
                       "totalFailures": 0,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": true,
                       "hasFailures": false,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 5
                   },
                   {
                       "title": "~Dealie~Should not be able to hit an endpoint that does not exist",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/post ]",
                               "fullTitle": "Public Query Service ~Dealie~Should not be able to hit an endpoint that does not exist \n\t[ POST http://localhost:4321/post ]",
                               "timedOut": false,
                               "duration": 4,
                               "state": "passed",
                               "speed": "fast",
                               "pass": true,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "f4d2d8b6-d0ee-48c5-b031-5e541cbd318d",
                               "parentUUID": "aa06d883-3ce1-4e89-b5c2-17f8eaa6dfe6",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "aa06d883-3ce1-4e89-b5c2-17f8eaa6dfe6",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/post ]",
                               "fullTitle": "Public Query Service ~Dealie~Should not be able to hit an endpoint that does not exist \n\t[ POST http://localhost:4321/post ]",
                               "timedOut": false,
                               "duration": 4,
                               "state": "passed",
                               "speed": "fast",
                               "pass": true,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "f4d2d8b6-d0ee-48c5-b031-5e541cbd318d",
                               "parentUUID": "aa06d883-3ce1-4e89-b5c2-17f8eaa6dfe6",
                               "skipped": false
                           }
                       ],
                       "failures": [
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 1,
                       "totalFailures": 0,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": true,
                       "hasFailures": false,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 4
                   }
               ],
               "tests": [
               ],
               "pending": [
               ],
               "root": false,
               "_timeout": 30000,
               "file": "/test/ServerDatasetSpec.js",
               "uuid": "13f192bb-e8ee-4b94-b256-2498cdbe2a8b",
               "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
               "passes": [
               ],
               "failures": [
               ],
               "skipped": [
               ],
               "hasTests": false,
               "hasSuites": true,
               "totalTests": 0,
               "totalPasses": 0,
               "totalFailures": 0,
               "totalPending": 0,
               "totalSkipped": 0,
               "hasPasses": false,
               "hasFailures": false,
               "hasPending": false,
               "hasSkipped": false,
               "duration": 0
           },
           {
               "title": "Dataset Service",
               "suites": [
                   {
                       "title": "~Bender~Should not be able to set a valid zip that does not contain any real data.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Dataset Service ~Bender~Should not be able to set a valid zip that does not contain any real data. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 204 to equal 400",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "3979af93-1239-4ac9-8bbf-38422c666e66",
                               "parentUUID": "394b600f-f2e9-4a1c-96a3-79f685ae75c3",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "394b600f-f2e9-4a1c-96a3-79f685ae75c3",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Dataset Service ~Bender~Should not be able to set a valid zip that does not contain any real data. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "AssertionError",
                                   "message": "expected 204 to equal 400",
                                   "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "3979af93-1239-4ac9-8bbf-38422c666e66",
                               "parentUUID": "394b600f-f2e9-4a1c-96a3-79f685ae75c3",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~BigFish~Should not be able to set a dataset that is not a zip file.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Dataset Service ~BigFish~Should not be able to set a dataset that is not a zip file. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "pass": false,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "3ec41487-4f09-4b5a-b53b-606301c823b9",
                               "parentUUID": "f386e2de-b83d-4e9b-a90b-1876f90eba9d",
                               "skipped": true
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerDatasetSpec.js",
                       "uuid": "f386e2de-b83d-4e9b-a90b-1876f90eba9d",
                       "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
                       "passes": [
                       ],
                       "failures": [
                       ],
                       "skipped": [
                           {
                               "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "fullTitle": "Dataset Service ~BigFish~Should not be able to set a dataset that is not a zip file. \n\t[ PUT http://localhost:4321/dataset/courses ]",
                               "timedOut": false,
                               "duration": 0,
                               "pass": false,
                               "fail": false,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "isRoot": false,
                               "uuid": "3ec41487-4f09-4b5a-b53b-606301c823b9",
                               "parentUUID": "f386e2de-b83d-4e9b-a90b-1876f90eba9d",
                               "skipped": true
                           }
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 0,
                       "totalPending": 0,
                       "totalSkipped": 1,
                       "hasPasses": false,
                       "hasFailures": false,
                       "hasPending": false,
                       "hasSkipped": true,
                       "duration": 0
                   }
               ],
               "tests": [
               ],
               "pending": [
               ],
               "root": false,
               "_timeout": 30000,
               "file": "/test/ServerDatasetSpec.js",
               "uuid": "4e3757b3-b7be-4baf-a1a4-8ffe3c14c871",
               "fullFile": "/project/deliverable/test/ServerDatasetSpec.js",
               "passes": [
               ],
               "failures": [
               ],
               "skipped": [
               ],
               "hasTests": false,
               "hasSuites": true,
               "totalTests": 0,
               "totalPasses": 0,
               "totalFailures": 0,
               "totalPending": 0,
               "totalSkipped": 0,
               "hasPasses": false,
               "hasFailures": false,
               "hasPending": false,
               "hasSkipped": false,
               "duration": 0
           },
           {
               "title": "Query Service",
               "suites": [
                   {
                       "title": "~Boourns~courses_dept should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Boourns~courses_dept should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "e0d2dd46-2399-4bc5-a897-34f26f68f41d",
                               "parentUUID": "2ffadcfa-ae35-4319-a32e-80e71e36c0d7",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "2ffadcfa-ae35-4319-a32e-80e71e36c0d7",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Boourns~courses_dept should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "e0d2dd46-2399-4bc5-a897-34f26f68f41d",
                               "parentUUID": "2ffadcfa-ae35-4319-a32e-80e71e36c0d7",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Bordeaux~courses_id should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Bordeaux~courses_id should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "20f9e0f6-f18f-489d-a5e6-28e6954ba191",
                               "parentUUID": "2789821e-7658-4e7c-85af-9afe507610ac",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "2789821e-7658-4e7c-85af-9afe507610ac",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Bordeaux~courses_id should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "20f9e0f6-f18f-489d-a5e6-28e6954ba191",
                               "parentUUID": "2789821e-7658-4e7c-85af-9afe507610ac",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Bulldozer~courses_avg should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Bulldozer~courses_avg should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "c6f0dd21-6003-4d47-a2c3-e12de3bfb77e",
                               "parentUUID": "19c3d2f6-0c60-445c-a7e8-c5baa1bb9b3d",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "19c3d2f6-0c60-445c-a7e8-c5baa1bb9b3d",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Bulldozer~courses_avg should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "c6f0dd21-6003-4d47-a2c3-e12de3bfb77e",
                               "parentUUID": "19c3d2f6-0c60-445c-a7e8-c5baa1bb9b3d",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Buster~courses_instructor should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Buster~courses_instructor should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "68241be2-b347-43c7-80ec-7403e1cfb50e",
                               "parentUUID": "4670a363-789f-4339-8aa2-4b3af1707ff5",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "4670a363-789f-4339-8aa2-4b3af1707ff5",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Buster~courses_instructor should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "68241be2-b347-43c7-80ec-7403e1cfb50e",
                               "parentUUID": "4670a363-789f-4339-8aa2-4b3af1707ff5",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Camelot~courses_title should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Camelot~courses_title should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "ce35867f-c60c-479f-936a-a32efa6281cb",
                               "parentUUID": "088a297b-39ca-4772-b1a3-68261b827d8a",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "088a297b-39ca-4772-b1a3-68261b827d8a",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Camelot~courses_title should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "ce35867f-c60c-479f-936a-a32efa6281cb",
                               "parentUUID": "088a297b-39ca-4772-b1a3-68261b827d8a",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Canary~courses_pass should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Canary~courses_pass should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "bff5c226-c902-47dc-8a2e-21b9281df90e",
                               "parentUUID": "1a93dcf7-930d-41a1-9343-1069977595c6",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "1a93dcf7-930d-41a1-9343-1069977595c6",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Canary~courses_pass should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "bff5c226-c902-47dc-8a2e-21b9281df90e",
                               "parentUUID": "1a93dcf7-930d-41a1-9343-1069977595c6",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cassanova~courses_fail should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cassanova~courses_fail should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "1ba8e642-252f-4909-ba13-aa81468977ab",
                               "parentUUID": "f4ed6ed4-62b5-4935-8c00-76edf135262a",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "f4ed6ed4-62b5-4935-8c00-76edf135262a",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cassanova~courses_fail should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "1ba8e642-252f-4909-ba13-aa81468977ab",
                               "parentUUID": "f4ed6ed4-62b5-4935-8c00-76edf135262a",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cascade~courses_audit should be recognizable as valid key.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cascade~courses_audit should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "90e2b9a3-c2b1-49a5-818e-31fdaeaded13",
                               "parentUUID": "6e36c039-eade-46df-8dfd-4837cfaa30da",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "6e36c039-eade-46df-8dfd-4837cfaa30da",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cascade~courses_audit should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "90e2b9a3-c2b1-49a5-818e-31fdaeaded13",
                               "parentUUID": "6e36c039-eade-46df-8dfd-4837cfaa30da",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cauldron~IS token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cauldron~IS token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "0d2b6cdc-c6f3-4814-a517-785edd5e8bfa",
                               "parentUUID": "57599a2b-2ac2-46ef-a706-50348dda0984",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "57599a2b-2ac2-46ef-a706-50348dda0984",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cauldron~IS token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "0d2b6cdc-c6f3-4814-a517-785edd5e8bfa",
                               "parentUUID": "57599a2b-2ac2-46ef-a706-50348dda0984",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cheerio~LT token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cheerio~LT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "68145522-49e4-4e13-9102-50cf423af807",
                               "parentUUID": "ce359652-ce60-43d7-a3da-fe725b1b17a4",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "ce359652-ce60-43d7-a3da-fe725b1b17a4",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cheerio~LT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "68145522-49e4-4e13-9102-50cf423af807",
                               "parentUUID": "ce359652-ce60-43d7-a3da-fe725b1b17a4",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cherrystone~EQ token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cherrystone~EQ token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "63d8cd97-b895-436c-8d7e-735ce95758c0",
                               "parentUUID": "d1e035ba-dd1a-4208-8153-3308745636db",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "d1e035ba-dd1a-4208-8153-3308745636db",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cherrystone~EQ token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "63d8cd97-b895-436c-8d7e-735ce95758c0",
                               "parentUUID": "d1e035ba-dd1a-4208-8153-3308745636db",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Chocotastic~GT token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Chocotastic~GT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "00b0425a-e01c-406a-ba53-cef2139ca51b",
                               "parentUUID": "2a5c6c08-3120-4138-bec9-b4805578d4c1",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "2a5c6c08-3120-4138-bec9-b4805578d4c1",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Chocotastic~GT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "00b0425a-e01c-406a-ba53-cef2139ca51b",
                               "parentUUID": "2a5c6c08-3120-4138-bec9-b4805578d4c1",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Cinnamon~OR token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cinnamon~OR token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "8100f563-d4b3-47c9-b3e3-44f7cc6faa25",
                               "parentUUID": "725dafce-b12c-4572-a192-03ec2a92b342",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "725dafce-b12c-4572-a192-03ec2a92b342",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Cinnamon~OR token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "8100f563-d4b3-47c9-b3e3-44f7cc6faa25",
                               "parentUUID": "725dafce-b12c-4572-a192-03ec2a92b342",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Coffee~AND token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Coffee~AND token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "19019a13-c464-4d89-8096-e7994d9d1da8",
                               "parentUUID": "a5239816-aedd-49fb-8c84-aa6f06ad5505",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "a5239816-aedd-49fb-8c84-aa6f06ad5505",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Coffee~AND token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "19019a13-c464-4d89-8096-e7994d9d1da8",
                               "parentUUID": "a5239816-aedd-49fb-8c84-aa6f06ad5505",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Colossus~NOT token should be implemented.",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Colossus~NOT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "47069106-6dd4-41d5-874a-cf0b290c63d0",
                               "parentUUID": "1e378848-b9f5-46eb-812f-f7c3b56fd412",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "1e378848-b9f5-46eb-812f-f7c3b56fd412",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Colossus~NOT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "47069106-6dd4-41d5-874a-cf0b290c63d0",
                               "parentUUID": "1e378848-b9f5-46eb-812f-f7c3b56fd412",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Dagwood~three level of deepness should be supported",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Dagwood~three level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "da966d6b-f214-4be9-852a-11bbb19cc327",
                               "parentUUID": "0d812122-e840-4845-a901-8275552c4128",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "0d812122-e840-4845-a901-8275552c4128",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Dagwood~three level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "da966d6b-f214-4be9-852a-11bbb19cc327",
                               "parentUUID": "0d812122-e840-4845-a901-8275552c4128",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Debigulator~four level of deepness should be supported",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Debigulator~four level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "0c0cc6a0-3f8e-46b7-afce-ac1a9e68c03d",
                               "parentUUID": "94066c5e-8b41-4b39-9e2b-320168ad102f",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "94066c5e-8b41-4b39-9e2b-320168ad102f",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Debigulator~four level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "0c0cc6a0-3f8e-46b7-afce-ac1a9e68c03d",
                               "parentUUID": "94066c5e-8b41-4b39-9e2b-320168ad102f",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   },
                   {
                       "title": "~Debigulator~five level of deepness should be supported",
                       "suites": [
                       ],
                       "tests": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Debigulator~five level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "84d2e595-7927-4558-b7c1-20fc91e045d6",
                               "parentUUID": "d020d686-9ab0-4432-8c6f-5c7c7c19d490",
                               "skipped": false
                           }
                       ],
                       "pending": [
                       ],
                       "root": false,
                       "_timeout": 30000,
                       "file": "/test/ServerQuerySpec.js",
                       "uuid": "d020d686-9ab0-4432-8c6f-5c7c7c19d490",
                       "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
                       "passes": [
                       ],
                       "failures": [
                           {
                               "title": "\n\t[ POST http://localhost:4321/query ]",
                               "fullTitle": "Query Service ~Debigulator~five level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
                               "timedOut": false,
                               "duration": 0,
                               "state": "failed",
                               "pass": false,
                               "fail": true,
                               "pending": false,
                               "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
                               "err": {
                                   "name": "ValidationError",
                                   "message": "\"status\" is not allowed. \"ts\" is not allowed",
                                   "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
                               },
                               "isRoot": false,
                               "uuid": "84d2e595-7927-4558-b7c1-20fc91e045d6",
                               "parentUUID": "d020d686-9ab0-4432-8c6f-5c7c7c19d490",
                               "skipped": false
                           }
                       ],
                       "skipped": [
                       ],
                       "hasTests": true,
                       "hasSuites": false,
                       "totalTests": 1,
                       "totalPasses": 0,
                       "totalFailures": 1,
                       "totalPending": 0,
                       "totalSkipped": 0,
                       "hasPasses": false,
                       "hasFailures": true,
                       "hasPending": false,
                       "hasSkipped": false,
                       "duration": 0
                   }
               ],
               "tests": [
               ],
               "pending": [
               ],
               "root": false,
               "_timeout": 30000,
               "file": "/test/ServerQuerySpec.js",
               "uuid": "f9b05de5-0d0e-4542-a035-f65f4df70608",
               "fullFile": "/project/deliverable/test/ServerQuerySpec.js",
               "passes": [
               ],
               "failures": [
               ],
               "skipped": [
               ],
               "hasTests": false,
               "hasSuites": true,
               "totalTests": 0,
               "totalPasses": 0,
               "totalFailures": 0,
               "totalPending": 0,
               "totalSkipped": 0,
               "hasPasses": false,
               "hasFailures": false,
               "hasPending": false,
               "hasSkipped": false,
               "duration": 0
           }
       ],
       "tests": [
       ],
       "pending": [
       ],
       "root": true,
       "_timeout": 30000,
       "uuid": "15c37fcd-6ad1-47d2-b6d2-89ee081dde1f",
       "fullFile": "",
       "file": "",
       "passes": [
       ],
       "failures": [
       ],
       "skipped": [
       ],
       "hasTests": false,
       "hasSuites": true,
       "totalTests": 0,
       "totalPasses": 0,
       "totalFailures": 0,
       "totalPending": 0,
       "totalSkipped": 0,
       "hasPasses": false,
       "hasFailures": false,
       "hasPending": false,
       "hasSkipped": false,
       "duration": 0,
       "rootEmpty": true
   },
   "allTests": [
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Apollo~Inserting a courses dataset should return a 204 if the dataset was not present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 400 to equal 204",
               "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "e1f13342-3304-4c92-8235-cce637b58694",
           "parentUUID": "b03b843f-2dfa-4747-b701-458178cc98e6",
           "skipped": false
       },
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Astro~Inserting a courses dataset should return a 201 if the dataset was present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 400 to equal 201",
               "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">201</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "ef3272f7-4931-4c05-a082-8a747883b251",
           "parentUUID": "4d7df598-4b9a-4a4e-a03f-07d0be980194",
           "skipped": false
       },
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Astroboy~Inserting a courses dataset should return a 400 if an error occurs. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 204 to equal 400",
               "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "6c373072-ae53-4723-994a-7ff245fb7653",
           "parentUUID": "9725c995-88e0-4ce1-91e5-204b0b431f70",
           "skipped": false
       },
       {
           "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Barcelona~Deleting an existing dataset should return a 204. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "TypeError",
               "message": "Cannot read property 'statusCode' of undefined",
               "stack": "<span class=\"hljs-built_in\">TypeError</span>: Cannot read property <span class=\"hljs-string\">'statusCode'</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">undefined</span><br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">723</span>:<span class=\"hljs-number\">22</span>)<br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">645</span>:<span class=\"hljs-number\">8</span>)<br>    at performInspections (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">874</span>:<span class=\"hljs-number\">14</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">863</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.onRequestError (node_modules/request/request.js:<span class=\"hljs-number\">813</span>:<span class=\"hljs-number\">8</span>)<br>    at Socket.socketErrorListener (_http_client.js:<span class=\"hljs-number\">308</span>:<span class=\"hljs-number\">9</span>)<br>    at emitErrorNT (net.js:<span class=\"hljs-number\">1272</span>:<span class=\"hljs-number\">8</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "4eb75ebd-e578-477c-b496-d83fa4d9204d",
           "parentUUID": "62b986eb-efbe-4595-b273-5a8139710556",
           "skipped": false
       },
       {
           "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Barney~Deleting a non-existing dataset should return a 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 405 to equal 404",
               "stack": "AssertionError: expected <span class=\"hljs-number\">405</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "2c960019-f939-4674-b1df-4fd7cfd158d8",
           "parentUUID": "d037631c-96f5-4448-83b0-4463c1812a6f",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321//query ]",
           "fullTitle": "~Barracuda~Sending a valid query should return a 424 if the dataset is not present. \n\t[ POST http://localhost:4321//query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 200 to equal 424",
               "stack": "AssertionError: expected <span class=\"hljs-number\">200</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "79334acb-f7e9-4a50-ab9d-32112b23c5fb",
           "parentUUID": "62415e83-eaa6-4c3a-a6d6-0940ab318b21",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321//query ]",
           "fullTitle": "~Batman~Sending a not valid query should return a 400 with an error message. \n\t[ POST http://localhost:4321//query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "77dc1915-be8c-4c66-86c7-7e29fbce19dd",
           "parentUUID": "d824412b-b48d-44cb-916b-7b19b3980eb6",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Colusa~Should be able to find sections with an average > 90. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "dbef59fa-c596-4fed-9579-06a41910bcfb",
           "parentUUID": "31136a81-5df2-45f4-ac5a-cd7d57245bfe",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cromulent~Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "03506cfa-b2ef-4de6-a108-c2f38155777c",
           "parentUUID": "5a699b0b-2aa7-483d-a58c-3284fda05db0",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Crusader~Should be able to find sections of CPSC 310 \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "23778503-3b28-4dfe-8cfc-5137bf3ca187",
           "parentUUID": "a466462b-42e4-4ba3-8fcc-4e9a97223e25",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cyclone~Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "f1dd3eac-c925-4cb8-938c-0b0e388146b0",
           "parentUUID": "bdab677d-3c9f-493a-a1f3-1c25d69e23bf",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Darwin~Should not be able to submit an empty query \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 5,
           "state": "passed",
           "speed": "fast",
           "pass": true,
           "fail": false,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "isRoot": false,
           "uuid": "6ef25abe-18b0-43bf-a771-7634d6b32d31",
           "parentUUID": "559c80e5-f860-49c0-9d5c-0d15f977d4e8",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/post ]",
           "fullTitle": "~Dealie~Should not be able to hit an endpoint that does not exist \n\t[ POST http://localhost:4321/post ]",
           "timedOut": false,
           "duration": 4,
           "state": "passed",
           "speed": "fast",
           "pass": true,
           "fail": false,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "isRoot": false,
           "uuid": "c9d1bb2b-3f59-4a9e-ab78-9d649300ebc1",
           "parentUUID": "aa06d883-3ce1-4e89-b5c2-17f8eaa6dfe6",
           "skipped": false
       },
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Bender~Should not be able to set a valid zip that does not contain any real data. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 204 to equal 400",
               "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "8fdb4ed1-698a-45f1-8514-0d7c879a1964",
           "parentUUID": "394b600f-f2e9-4a1c-96a3-79f685ae75c3",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Boourns~courses_dept should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "721cf8f3-d3c7-44f1-8f96-ffa1f19aa594",
           "parentUUID": "2ffadcfa-ae35-4319-a32e-80e71e36c0d7",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Bordeaux~courses_id should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "d20cc393-1cd4-48e1-a35d-2c73a7581db0",
           "parentUUID": "2789821e-7658-4e7c-85af-9afe507610ac",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Bulldozer~courses_avg should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "000cbdd2-66d0-4f26-810c-55692e5d85e1",
           "parentUUID": "19c3d2f6-0c60-445c-a7e8-c5baa1bb9b3d",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Buster~courses_instructor should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "11209344-a57e-44d1-8577-e68e7e6fe50d",
           "parentUUID": "4670a363-789f-4339-8aa2-4b3af1707ff5",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Camelot~courses_title should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "ae9d31f6-95ef-41f6-88e7-861660a93280",
           "parentUUID": "088a297b-39ca-4772-b1a3-68261b827d8a",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Canary~courses_pass should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "e3864216-79ce-46dc-ae65-e38a5ecbefb7",
           "parentUUID": "1a93dcf7-930d-41a1-9343-1069977595c6",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cassanova~courses_fail should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "cea1dd6b-17c6-49db-b610-326b8a790fb0",
           "parentUUID": "f4ed6ed4-62b5-4935-8c00-76edf135262a",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cascade~courses_audit should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "0ac74a15-20ad-4608-b1f0-0fb5d15d284f",
           "parentUUID": "6e36c039-eade-46df-8dfd-4837cfaa30da",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cauldron~IS token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "bfa1ebf7-0931-40ab-b1ea-d5a5ee10e0bf",
           "parentUUID": "57599a2b-2ac2-46ef-a706-50348dda0984",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cheerio~LT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "d3332b0e-216a-440e-8840-eebd4ff66375",
           "parentUUID": "ce359652-ce60-43d7-a3da-fe725b1b17a4",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cherrystone~EQ token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "e9f1fe38-3c91-44c1-8ad4-d25aa87287dc",
           "parentUUID": "d1e035ba-dd1a-4208-8153-3308745636db",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Chocotastic~GT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "852b14d9-f27d-4f6f-885e-6fb5433b01bd",
           "parentUUID": "2a5c6c08-3120-4138-bec9-b4805578d4c1",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cinnamon~OR token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "0ffc2395-a35e-47a9-b7a9-febf5e752e0e",
           "parentUUID": "725dafce-b12c-4572-a192-03ec2a92b342",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Coffee~AND token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "e82d84d4-5f3b-4dd8-8ea7-e6368eb9a3a1",
           "parentUUID": "a5239816-aedd-49fb-8c84-aa6f06ad5505",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Colossus~NOT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "80423960-0889-41c9-b40c-e7c080ccda16",
           "parentUUID": "1e378848-b9f5-46eb-812f-f7c3b56fd412",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Dagwood~three level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "274d71aa-9231-44e9-934f-b5a119c8bbc4",
           "parentUUID": "0d812122-e840-4845-a901-8275552c4128",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Debigulator~four level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "17805352-65fd-45d5-bd63-df3df785e992",
           "parentUUID": "94066c5e-8b41-4b39-9e2b-320168ad102f",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Debigulator~five level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "e73d2c4a-c1e9-4f4f-b743-ac6154b456c1",
           "parentUUID": "d020d686-9ab0-4432-8c6f-5c7c7c19d490",
           "skipped": false
       }
   ],
   "allPending": [
   ],
   "allPasses": [
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Darwin~Should not be able to submit an empty query \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 5,
           "state": "passed",
           "speed": "fast",
           "pass": true,
           "fail": false,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "isRoot": false,
           "uuid": "c2010b83-3039-49c0-8e0c-1ca46ae1d3ef",
           "parentUUID": "559c80e5-f860-49c0-9d5c-0d15f977d4e8",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/post ]",
           "fullTitle": "~Dealie~Should not be able to hit an endpoint that does not exist \n\t[ POST http://localhost:4321/post ]",
           "timedOut": false,
           "duration": 4,
           "state": "passed",
           "speed": "fast",
           "pass": true,
           "fail": false,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "isRoot": false,
           "uuid": "bd903260-4515-4915-9b51-7b67e82c07a3",
           "parentUUID": "aa06d883-3ce1-4e89-b5c2-17f8eaa6dfe6",
           "skipped": false
       }
   ],
   "allFailures": [
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Apollo~Inserting a courses dataset should return a 204 if the dataset was not present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 400 to equal 204",
               "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">204</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "eb80d6aa-52bb-4ede-a7fa-eb2cc539a987",
           "parentUUID": "b03b843f-2dfa-4747-b701-458178cc98e6",
           "skipped": false
       },
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Astro~Inserting a courses dataset should return a 201 if the dataset was present before. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 400 to equal 201",
               "stack": "AssertionError: expected <span class=\"hljs-number\">400</span> to equal <span class=\"hljs-number\">201</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "4cea5274-374a-499c-b555-59e55f88798f",
           "parentUUID": "4d7df598-4b9a-4a4e-a03f-07d0be980194",
           "skipped": false
       },
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Astroboy~Inserting a courses dataset should return a 400 if an error occurs. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 204 to equal 400",
               "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "50ea253f-c736-4016-a93b-5a1e4210cd76",
           "parentUUID": "9725c995-88e0-4ce1-91e5-204b0b431f70",
           "skipped": false
       },
       {
           "title": "\"after each\" hook",
           "fullTitle": "Code Service \"after each\" hook",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "server.stop().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>{<br>    Util_1.default.test(<span class=\"hljs-string\">\"CodeService::afterEach() - closed: \"</span> + val);<br>    done();<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    Util_1.default.error(<span class=\"hljs-string\">\"CodeService::afterEach() - ERROR: \"</span> + err);<br>    done();<br>});",
           "err": {
               "name": "Error",
               "message": "ENOENT: no such file or directory, open '/Users/kseniapinski/Documents/cpsc310project/data/courses.json'",
               "stack": "<span class=\"hljs-built_in\">Error</span>: ENOENT: no such file or directory, open <span class=\"hljs-string\">'/Users/kseniapinski/Documents/cpsc310project/data/courses.json'</span><br>    at <span class=\"hljs-built_in\">Error</span> (native)"
           },
           "isRoot": false,
           "uuid": "242db097-3be0-4720-874e-8a9c46cda12d",
           "parentUUID": "59f50eeb-1d19-46fc-a65c-62c92310bb8f",
           "skipped": false
       },
       {
           "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Barcelona~Deleting an existing dataset should return a 204. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "TypeError",
               "message": "Cannot read property 'statusCode' of undefined",
               "stack": "<span class=\"hljs-built_in\">TypeError</span>: Cannot read property <span class=\"hljs-string\">'statusCode'</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">undefined</span><br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">723</span>:<span class=\"hljs-number\">22</span>)<br>    at Frisby.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">645</span>:<span class=\"hljs-number\">8</span>)<br>    at performInspections (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">874</span>:<span class=\"hljs-number\">14</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">863</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.onRequestError (node_modules/request/request.js:<span class=\"hljs-number\">813</span>:<span class=\"hljs-number\">8</span>)<br>    at Socket.socketErrorListener (_http_client.js:<span class=\"hljs-number\">308</span>:<span class=\"hljs-number\">9</span>)<br>    at emitErrorNT (net.js:<span class=\"hljs-number\">1272</span>:<span class=\"hljs-number\">8</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "f193bc46-b988-478c-a53e-69817b92ec03",
           "parentUUID": "62b986eb-efbe-4595-b273-5a8139710556",
           "skipped": false
       },
       {
           "title": "\n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Barney~Deleting a non-existing dataset should return a 404. \n\t[ DELETE http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 405 to equal 404",
               "stack": "AssertionError: expected <span class=\"hljs-number\">405</span> to equal <span class=\"hljs-number\">404</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "31bb1438-1f6d-4251-b49a-8f8863063eae",
           "parentUUID": "d037631c-96f5-4448-83b0-4463c1812a6f",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321//query ]",
           "fullTitle": "~Barracuda~Sending a valid query should return a 424 if the dataset is not present. \n\t[ POST http://localhost:4321//query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 200 to equal 424",
               "stack": "AssertionError: expected <span class=\"hljs-number\">200</span> to equal <span class=\"hljs-number\">424</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "4e248efb-9891-4433-9a49-2967f9a06be5",
           "parentUUID": "62415e83-eaa6-4c3a-a6d6-0940ab318b21",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321//query ]",
           "fullTitle": "~Batman~Sending a not valid query should return a 400 with an error message. \n\t[ POST http://localhost:4321//query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "d8110c7f-6ae6-4c41-ade2-43353ac91a2d",
           "parentUUID": "d824412b-b48d-44cb-916b-7b19b3980eb6",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Colusa~Should be able to find sections with an average > 90. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "5d91b223-3298-4eff-827a-13fa18cbd16e",
           "parentUUID": "31136a81-5df2-45f4-ac5a-cd7d57245bfe",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cromulent~Should be able to find sections with an average > 70 and in the adhe department, or with a 90 average in any department. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "10c938cb-b4e7-4433-ad50-9691baeb36fc",
           "parentUUID": "5a699b0b-2aa7-483d-a58c-3284fda05db0",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Crusader~Should be able to find sections of CPSC 310 \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "b7e4a754-bd2a-4326-92e4-48c04cd1ffa6",
           "parentUUID": "a466462b-42e4-4ba3-8fcc-4e9a97223e25",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cyclone~Should be able to find sections in CP* with average > 70 AND are not taught by Murphy, Gail OR any courses taught by Gregor. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "52c96601-133c-4b9d-9a52-781ba5f73b0a",
           "parentUUID": "bdab677d-3c9f-493a-a1f3-1c25d69e23bf",
           "skipped": false
       },
       {
           "title": "\n\t[ PUT http://localhost:4321/dataset/courses ]",
           "fullTitle": "~Bender~Should not be able to set a valid zip that does not contain any real data. \n\t[ PUT http://localhost:4321/dataset/courses ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "AssertionError",
               "message": "expected 204 to equal 400",
               "stack": "AssertionError: expected <span class=\"hljs-number\">204</span> to equal <span class=\"hljs-number\">400</span><br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">484</span>:<span class=\"hljs-number\">49</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "e3e65ae9-d80c-40f7-98c1-ee53a9c950f6",
           "parentUUID": "394b600f-f2e9-4a1c-96a3-79f685ae75c3",
           "skipped": false
       },
       {
           "title": "\"after each\" hook",
           "fullTitle": "Dataset Service \"after each\" hook",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "server.stop().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>{<br>    Util_1.default.test(<span class=\"hljs-string\">\"DatasetService::afterEach() - closed: \"</span> + val);<br>    done();<br>}).catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{<br>    Util_1.default.error(<span class=\"hljs-string\">\"DatasetService::afterEach() - ERROR: \"</span> + err);<br>    done();<br>});",
           "err": {
               "name": "Error",
               "message": "ENOENT: no such file or directory, open '/Users/kseniapinski/Documents/cpsc310project/data/courses.json'",
               "stack": "<span class=\"hljs-built_in\">Error</span>: ENOENT: no such file or directory, open <span class=\"hljs-string\">'/Users/kseniapinski/Documents/cpsc310project/data/courses.json'</span><br>    at <span class=\"hljs-built_in\">Error</span> (native)"
           },
           "isRoot": false,
           "uuid": "031dd0d6-dd3b-4ea7-ad6f-e9413e89aac6",
           "parentUUID": "4e3757b3-b7be-4baf-a1a4-8ffe3c14c871",
           "skipped": false
       },
       {
           "title": "Uncaught error outside test suite",
           "fullTitle": " Uncaught error outside test suite",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "",
           "err": {
               "name": "TypeError",
               "message": "Cannot read property 'currentRetry' of undefined",
               "stack": "<span class=\"hljs-built_in\">TypeError</span>: Cannot read property <span class=\"hljs-string\">'currentRetry'</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">undefined</span>"
           },
           "isRoot": true,
           "uuid": "0d7fcc0a-d76e-453c-afa3-992e87f7d92f",
           "parentUUID": "15c37fcd-6ad1-47d2-b6d2-89ee081dde1f",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Boourns~courses_dept should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "a6eec85f-c5b7-48ca-9845-f64b2d4487a4",
           "parentUUID": "2ffadcfa-ae35-4319-a32e-80e71e36c0d7",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Bordeaux~courses_id should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "15d52f15-5da1-444c-8f4f-ba34136f48a0",
           "parentUUID": "2789821e-7658-4e7c-85af-9afe507610ac",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Bulldozer~courses_avg should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "9a5d8120-4016-4bf3-bdb9-9bf11d7d2ff0",
           "parentUUID": "19c3d2f6-0c60-445c-a7e8-c5baa1bb9b3d",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Buster~courses_instructor should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "a265d871-7d78-4477-87c8-bb4c6af0de6b",
           "parentUUID": "4670a363-789f-4339-8aa2-4b3af1707ff5",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Camelot~courses_title should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "9e1f36d1-defb-42c7-ba88-f90b724c0d6f",
           "parentUUID": "088a297b-39ca-4772-b1a3-68261b827d8a",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Canary~courses_pass should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "5d991fdf-6b88-45c0-aef0-4495805827b3",
           "parentUUID": "1a93dcf7-930d-41a1-9343-1069977595c6",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cassanova~courses_fail should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "f72197b7-7f7e-435d-b546-26e2a95f5c43",
           "parentUUID": "f4ed6ed4-62b5-4935-8c00-76edf135262a",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cascade~courses_audit should be recognizable as valid key. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "6158241f-a35c-41eb-85e4-c947d60b709d",
           "parentUUID": "6e36c039-eade-46df-8dfd-4837cfaa30da",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cauldron~IS token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "57cb6edb-a75f-49ec-a84b-a687c5c4706e",
           "parentUUID": "57599a2b-2ac2-46ef-a706-50348dda0984",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cheerio~LT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "0a3f9046-06fe-47ec-8297-152c2f7516a4",
           "parentUUID": "ce359652-ce60-43d7-a3da-fe725b1b17a4",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cherrystone~EQ token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "60ce0493-a3ff-4eba-91f2-1511adcf0ee6",
           "parentUUID": "d1e035ba-dd1a-4208-8153-3308745636db",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Chocotastic~GT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "39852398-3f3a-452e-b11c-a4f08aa99c4c",
           "parentUUID": "2a5c6c08-3120-4138-bec9-b4805578d4c1",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Cinnamon~OR token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "be94d59f-54cb-4df2-ae30-792eabdb5e8e",
           "parentUUID": "725dafce-b12c-4572-a192-03ec2a92b342",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Coffee~AND token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "d3da0d32-1c54-4d67-9250-62f53a347530",
           "parentUUID": "a5239816-aedd-49fb-8c84-aa6f06ad5505",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Colossus~NOT token should be implemented. \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "b0a9c5de-76f7-4898-8e4d-d6f3eb17d14f",
           "parentUUID": "1e378848-b9f5-46eb-812f-f7c3b56fd412",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Dagwood~three level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "50a61ace-4794-468d-9db8-1d6b587454b4",
           "parentUUID": "0d812122-e840-4845-a901-8275552c4128",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Debigulator~four level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "b9eda5ad-61eb-4a5f-a524-1fa33df11da5",
           "parentUUID": "94066c5e-8b41-4b39-9e2b-320168ad102f",
           "skipped": false
       },
       {
           "title": "\n\t[ POST http://localhost:4321/query ]",
           "fullTitle": "~Debigulator~five level of deepness should be supported \n\t[ POST http://localhost:4321/query ]",
           "timedOut": false,
           "duration": 0,
           "state": "failed",
           "pass": false,
           "fail": true,
           "pending": false,
           "code": "<span class=\"hljs-comment\">// Ensure \"it\" scope is accessible to tests</span><br><span class=\"hljs-keyword\">var</span> it = <span class=\"hljs-keyword\">this</span>;<br><span class=\"hljs-comment\">// mock results_</span><br>it.results_ = {<br>  failedCount: <span class=\"hljs-number\">0</span><br>};<br>it.request = self.current.outgoing;<br><span class=\"hljs-comment\">// launch request</span><br><span class=\"hljs-comment\">// repeat request for self.current.retry times if request does not respond with self._timeout ms (except for POST requests)</span><br><span class=\"hljs-keyword\">var</span> tries = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> retries = (self.current.outgoing.method.toUpperCase() == <span class=\"hljs-string\">\"POST\"</span>) ? <span class=\"hljs-number\">0</span> : self.current.retry;<br><span class=\"hljs-comment\">// wait optinally, launch request</span><br><span class=\"hljs-keyword\">if</span> (self.current.waits &gt; <span class=\"hljs-number\">0</span>) {<br>  setTimeout(makeRequest, self.current.waits);<br>} <span class=\"hljs-keyword\">else</span> {<br>  makeRequest();<br>}<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeRequest</span>(<span class=\"hljs-params\"></span>)</span>{<br>  <span class=\"hljs-keyword\">var</span> requestFinished = <span class=\"hljs-literal\">false</span>;<br>  <span class=\"hljs-keyword\">var</span> timeoutFinished = <span class=\"hljs-literal\">false</span>;<br>  tries++;<br>  <span class=\"hljs-keyword\">var</span> timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxWait</span>(<span class=\"hljs-params\"></span>)</span>{<br>    timeoutFinished = <span class=\"hljs-literal\">true</span>;<br>    <span class=\"hljs-keyword\">if</span> (tries &lt; retries+<span class=\"hljs-number\">1</span>){<br>      it.results_.totalCount = it.results_.passedCount = it.results_.failedCount = <span class=\"hljs-number\">0</span>;<br>      it.results_.skipped = <span class=\"hljs-literal\">false</span>;<br>      it.results_.items_ = [];<br>      process.stdout.write(<span class=\"hljs-string\">'R'</span>);<br>      makeRequest();<br>    } <span class=\"hljs-keyword\">else</span> {<br>      <span class=\"hljs-comment\">// should abort instead (it.spec.fail ?)</span><br>      it.results_.failedCount = <span class=\"hljs-number\">1</span>;<br>      after();<br>      <span class=\"hljs-comment\">// assert();</span><br>    }<br>  }, self._timeout);<br>  self.current.it(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!timeoutFinished) {<br>      clearTimeout(timeoutId);<br>      performInspections();<br>      assert();<br>    }<br>  });<br>}<br><br><span class=\"hljs-comment\">// Perform inspections</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">performInspections</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.inspections.length; i++) {<br>    <span class=\"hljs-keyword\">var</span> fn = self.current.inspections[i];<br>    fn.call(self);<br>  }<br>}<br><br><span class=\"hljs-comment\">// Assert callback</span><br><span class=\"hljs-comment\">// called from makeRequest if request has finished successfully</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assert</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">var</span> i;<br>  it.response = self.current.response;<br>  self.current.expectsFailed = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-comment\">// if you have no expects, they can't fail</span><br>  <span class=\"hljs-keyword\">if</span> (self.current.expects.length === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>  <span class=\"hljs-comment\">// Some 'expects' helpers add more tests when executed (recursive 'expectJSON' and 'expectJSONTypes', with nested JSON syntax etc.)</span><br>  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.expects.length; i++) {<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>      <span class=\"hljs-keyword\">try</span> {<br>        self.current.expects[i].call(it);<br>      } <span class=\"hljs-keyword\">catch</span>(e) {<br>        self._exceptionHandler.call(self, e);<br>      }<br>    } <span class=\"hljs-keyword\">else</span> {<br>      self.current.expects[i].call(it);<br>    }<br>  }<br>  <span class=\"hljs-keyword\">if</span> (it.results_.failedCount === <span class=\"hljs-number\">0</span>) {<br>    retry = -<span class=\"hljs-number\">1</span>;<br>    self.current.expectsFailed = <span class=\"hljs-literal\">false</span>;<br>  }<br>  <span class=\"hljs-comment\">// call after()</span><br>  after();<br>}<br><span class=\"hljs-comment\">// AFTER callback (execute further expects for the current spec)</span><br><span class=\"hljs-comment\">// called from assert()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">after</span>(<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">if</span>(self.current.after) {<br>    <span class=\"hljs-keyword\">if</span> (self.current.expectsFailed &amp;&amp; self.current.outgoing.inspectOnFailure) {<br>      <span class=\"hljs-built_in\">console</span>.log(self.current.itInfo + <span class=\"hljs-string\">' has FAILED with the following response:'</span>);<br>      self.inspectStatus();<br>      self.inspectJSON();<br>    }<br>    <span class=\"hljs-comment\">// REQUIRES count for EACH loop iteration (i.e. DO NOT OPTIMIZE THIS LOOP)</span><br>    <span class=\"hljs-comment\">// this enables after to add more after to do things (like inspectJSON)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i &lt; self.current.after.length; i++) {<br>      <span class=\"hljs-keyword\">var</span> fn = self.current.after[i];<br>      <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span> !== self._exceptionHandler) {<br>        <span class=\"hljs-keyword\">try</span> {<br>          fn.call(self);<br>        } <span class=\"hljs-keyword\">catch</span>(e) {<br>          self._exceptionHandler(e);<br>        }<br>      } <span class=\"hljs-keyword\">else</span> {<br>        fn.call(self);<br>      }<br>    }<br>  }<br>  <span class=\"hljs-comment\">// finally call done to finish spec</span><br>  done();<br>}",
           "err": {
               "name": "ValidationError",
               "message": "\"status\" is not allowed. \"ts\" is not allowed",
               "stack": "ValidationError: <span class=\"hljs-string\">\"status\"</span> is not allowed. <span class=\"hljs-string\">\"ts\"</span> is not allowed<br>    at <span class=\"hljs-built_in\">Object</span>.exports.process (node_modules/icedfrisby/node_modules/joi/lib/errors.js:<span class=\"hljs-number\">140</span>:<span class=\"hljs-number\">17</span>)<br>    at internals.Any._validateWithOptions (node_modules/icedfrisby/node_modules/joi/lib/any.js:<span class=\"hljs-number\">654</span>:<span class=\"hljs-number\">25</span>)<br>    at root.validate (node_modules/icedfrisby/node_modules/joi/lib/index.js:<span class=\"hljs-number\">100</span>:<span class=\"hljs-number\">23</span>)<br>    at <span class=\"hljs-built_in\">Object</span>.pathMatch.matchJSONTypes (node_modules/icedfrisby/lib/pathMatch.js:<span class=\"hljs-number\">301</span>:<span class=\"hljs-number\">13</span>)<br>    at Context.&lt;anonymous&gt; (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">553</span>:<span class=\"hljs-number\">8</span>)<br>    at assert (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">902</span>:<span class=\"hljs-number\">37</span>)<br>    at node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">864</span>:<span class=\"hljs-number\">13</span><br>    at Request.runCallback [<span class=\"hljs-keyword\">as</span> _callback] (node_modules/icedfrisby/lib/icedfrisby.js:<span class=\"hljs-number\">442</span>:<span class=\"hljs-number\">9</span>)<br>    at Request.self.callback (node_modules/request/request.js:<span class=\"hljs-number\">187</span>:<span class=\"hljs-number\">22</span>)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">1048</span>:<span class=\"hljs-number\">10</span>)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:<span class=\"hljs-number\">969</span>:<span class=\"hljs-number\">12</span>)<br>    at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">973</span>:<span class=\"hljs-number\">12</span>)<br>    at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>    at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)"
           },
           "isRoot": false,
           "uuid": "c868c990-409d-44a3-8f10-3da63532679a",
           "parentUUID": "d020d686-9ab0-4432-8c6f-5c7c7c19d490",
           "skipped": false
       }
   ],
   "copyrightYear": 2016
}




var skip = report.suites.suites.reduce(function (prevSkippedTests, currSkippedTests) {
        //console.log(prevSkippedTests);
        //console.log(currSkippedTests);
        var x = currSkippedTests.suites.filter(function (suite) {
          return suite.hasSkipped;
        }).map(function (suite) {
          return suite.skipped.map(function(skippedTest) {
            var testName = skippedTest.fullTitle;
            return testName.substring(testName.indexOf('~'), testName.lastIndexOf('~'));
          });
        });
        console.log(x);
        // .map(function (test) {
        //   console.log(test.skipped);
        //     var testName = test.fullTitle;
        //     return testName.substring(1, testName.lastIndexOf('~'));
        // });
        return prevSkippedTests.concat(x);
      }, []).reduce(function(a, b) {
        return a.concat(b);
      }, []);
      // .map(function(skippedTest) {
      //   var testName = skippedTest.fullTitle;
      //   return testName.substring(1, testName.lastIndexOf('~'));
      // });

console.log("skip follows");
console.log(skip);



// reduce to skipped names per suite
var skipname = report.suites.suites.reduce(function (prevSuiteSkippedTestNames, currSuite) {

        var skippedTestNames = currSuite.suites.filter(function (suite) {
          return suite.hasSkipped;
        }).map(function (suite) {
          return suite.skipped.map(function(skippedTest) {
            var testName = skippedTest.fullTitle;
            return testName.substring(testName.indexOf('~')+1, testName.lastIndexOf('~'));
          });
        });

        return prevSuiteSkippedTestNames.concat(skippedTestNames);
      }, []).reduce(function(a, b) { // flatten skipped names per suite into 1D array
        return a.concat(b);
      }, []);


console.log("skip follows");
console.log(skipname);










var skipnew = report.suites.suites.filter(function (suite) {
          return suite.hasSkipped;
        }).map(function (suite) {
          return suite.skipped.map(function(skippedTest) {
            var testName = skippedTest.fullTitle;
            return testName.substring(testName.indexOf('~'), testName.lastIndexOf('~'));
          });
        }).reduce(function (prevSkippedTests, currSkippedTests) {;
          console.log(prevSkippedTests);
          console.log(currSkippedTests);
        // .map(function (test) {
        //   console.log(test.skipped);
        //     var testName = test.fullTitle;
        //     return testName.substring(1, testName.lastIndexOf('~'));
        // });
        return prevSkippedTests.concat(currSkippedTests);
      }, [])
      // .map(function(skippedTest) {
      //   var testName = skippedTest.fullTitle;
      //   return testName.substring(1, testName.lastIndexOf('~'));
      // });

console.log(skipnew);



/*
      skip: doc.report.suites.suites.reduce(function (prevSkippedTests, CurrSkippedTests) {
              return prevSkippedTests.concat(CurrSkippedTests.filter(function (suite) {
                return suite.hasSkipped;
              }).map(function (test) {
                  var testName = test.fullTitle;
                  return testName.substring(1, testName.lastIndexOf('~'));
              }))
            }, [])

            */
